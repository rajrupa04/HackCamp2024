{"ast":null,"code":"var _jsxFileName = \"/Users/Florence/Desktop/HackCamp2024/frontend/src/puzzlePage.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport './App.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst gridSize = 5; // Sample 5x5 grid for demonstration\nconst pairs = [{\n  color: 'red',\n  start: [0, 0],\n  end: [4, 4]\n}, {\n  color: 'blue',\n  start: [0, 1],\n  end: [4, 3]\n}, {\n  color: 'yellow',\n  start: [1, 3],\n  end: [3, 1]\n}, {\n  color: 'green',\n  start: [3, 0],\n  end: [0, 2]\n}\n// Add more pairs as needed\n];\nfunction App() {\n  _s();\n  const [grid, setGrid] = useState(Array.from({\n    length: gridSize\n  }, () => Array(gridSize).fill(null)));\n  const [activeFlow, setActiveFlow] = useState(null); // Stores current flow being drawn\n  const [moveCount, setMoveCount] = useState(0);\n  const [isDragging, setIsDragging] = useState(false); // Track if dragging is active\n\n  // Initialize the grid with color pairs' start and end points\n  const initializeGrid = () => {\n    const newGrid = grid.map(row => row.slice());\n    pairs.forEach(pair => {\n      newGrid[pair.start[0]][pair.start[1]] = pair.color; // Set start point\n      newGrid[pair.end[0]][pair.end[1]] = pair.color; // Set end point\n    });\n    setGrid(newGrid);\n  };\n\n  // Call initializeGrid once when the app is mounted\n  useEffect(() => {\n    initializeGrid();\n  }, []);\n  const handleCellDown = (row, col) => {\n    const selectedPair = pairs.find(pair => pair.start[0] === row && pair.start[1] === col || pair.end[0] === row && pair.end[1] === col);\n    if (selectedPair) {\n      setActiveFlow({\n        color: selectedPair.color,\n        path: [[row, col]]\n      });\n      setIsDragging(true); // Start dragging\n    }\n  };\n  const handleCellOver = (row, col) => {\n    if (!activeFlow || !isDragging) return; // Only update during dragging\n\n    // Avoid adding duplicate cells to the path\n    const lastCell = activeFlow.path[activeFlow.path.length - 1];\n\n    // Only add the cell to the path if it is adjacent to the last cell\n    if (Math.abs(lastCell[0] - row) === 1 && lastCell[1] === col ||\n    // Adjacent in row\n    Math.abs(lastCell[1] - col) === 1 && lastCell[0] === row // Adjacent in column\n    ) {\n      // Avoid adding the same cell again\n      if (lastCell[0] !== row || lastCell[1] !== col) {\n        // Check if the cell is already colored\n        if (grid[row][col] !== null) return; // Skip if the cell is already filled\n\n        const newPath = [...activeFlow.path, [row, col]];\n        setActiveFlow({\n          ...activeFlow,\n          path: newPath\n        });\n        updateGridPath(newPath);\n      }\n    }\n  };\n  const handleCellUp = () => {\n    if (activeFlow) {\n      completeFlow(activeFlow);\n      setMoveCount(prevCount => prevCount + 1); // Increment move count for completed flow\n    }\n    setActiveFlow(null);\n    setIsDragging(false); // Stop dragging\n  };\n  const updateGridPath = path => {\n    const newGrid = grid.map(row => row.slice()); // Deep copy\n    path.forEach(([row, col]) => {\n      newGrid[row][col] = activeFlow.color; // Set the cell to active flow color\n    });\n    setGrid(newGrid);\n  };\n  const completeFlow = flow => {\n    // Check if path completes a pair, update accordingly\n    // Logic to finalize the flow and check if puzzle is solved\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"grid\",\n      style: {\n        display: 'grid',\n        gridTemplateColumns: `repeat(${gridSize}, 50px)`\n      },\n      children: grid.map((row, rowIndex) => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"grid-row\",\n        children: row.map((cellColor, colIndex) => /*#__PURE__*/_jsxDEV(\"div\", {\n          className: `grid-cell ${cellColor ? `filled-${cellColor}` : ''}`,\n          onMouseDown: () => handleCellDown(rowIndex, colIndex),\n          onMouseEnter: () => handleCellOver(rowIndex, colIndex),\n          onMouseUp: handleCellUp,\n          style: {\n            width: '50px',\n            height: '50px',\n            backgroundColor: cellColor ? cellColor : 'lightgray',\n            border: '1px solid black',\n            position: 'relative'\n          },\n          children: cellColor && /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"dot\",\n            style: {\n              backgroundColor: cellColor,\n              width: '15px',\n              height: '15px',\n              borderRadius: '50%',\n              position: 'absolute',\n              top: '50%',\n              left: '50%',\n              transform: 'translate(-50%, -50%)'\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 112,\n            columnNumber: 31\n          }, this)\n        }, `${rowIndex}-${colIndex}`, false, {\n          fileName: _jsxFileName,\n          lineNumber: 98,\n          columnNumber: 15\n        }, this))\n      }, rowIndex, false, {\n        fileName: _jsxFileName,\n        lineNumber: 96,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"info\",\n      children: /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Moves: \", moveCount]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 128,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 127,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 93,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"di/ZxQe/lDVhAOsTseAVYdn71HQ=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","jsxDEV","_jsxDEV","gridSize","pairs","color","start","end","App","_s","grid","setGrid","Array","from","length","fill","activeFlow","setActiveFlow","moveCount","setMoveCount","isDragging","setIsDragging","initializeGrid","newGrid","map","row","slice","forEach","pair","handleCellDown","col","selectedPair","find","path","handleCellOver","lastCell","Math","abs","newPath","updateGridPath","handleCellUp","completeFlow","prevCount","flow","className","children","style","display","gridTemplateColumns","rowIndex","cellColor","colIndex","onMouseDown","onMouseEnter","onMouseUp","width","height","backgroundColor","border","position","borderRadius","top","left","transform","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/Florence/Desktop/HackCamp2024/frontend/src/puzzlePage.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport './App.css';\n\nconst gridSize = 5;  // Sample 5x5 grid for demonstration\nconst pairs = [\n  { color: 'red', start: [0, 0], end: [4, 4] },\n  { color: 'blue', start: [0, 1], end: [4, 3] },\n  { color: 'yellow', start: [1, 3], end: [3, 1] },\n  { color: 'green', start: [3, 0], end: [0, 2] },\n  // Add more pairs as needed\n];\n\nfunction App() {\n  const [grid, setGrid] = useState(\n    Array.from({ length: gridSize }, () => Array(gridSize).fill(null))\n  );\n  const [activeFlow, setActiveFlow] = useState(null); // Stores current flow being drawn\n  const [moveCount, setMoveCount] = useState(0);\n  const [isDragging, setIsDragging] = useState(false); // Track if dragging is active\n\n  // Initialize the grid with color pairs' start and end points\n  const initializeGrid = () => {\n    const newGrid = grid.map(row => row.slice());\n    pairs.forEach(pair => {\n      newGrid[pair.start[0]][pair.start[1]] = pair.color; // Set start point\n      newGrid[pair.end[0]][pair.end[1]] = pair.color; // Set end point\n    });\n    setGrid(newGrid);\n  };\n\n  // Call initializeGrid once when the app is mounted\n  useEffect(() => {\n    initializeGrid();\n  }, []);\n\n  const handleCellDown = (row, col) => {\n    const selectedPair = pairs.find(\n      pair => (pair.start[0] === row && pair.start[1] === col) || \n              (pair.end[0] === row && pair.end[1] === col)\n    );\n    if (selectedPair) {\n      setActiveFlow({ color: selectedPair.color, path: [[row, col]] });\n      setIsDragging(true); // Start dragging\n    }\n  };\n\n  const handleCellOver = (row, col) => {\n    if (!activeFlow || !isDragging) return;  // Only update during dragging\n\n    // Avoid adding duplicate cells to the path\n    const lastCell = activeFlow.path[activeFlow.path.length - 1];\n\n    // Only add the cell to the path if it is adjacent to the last cell\n    if (\n      (Math.abs(lastCell[0] - row) === 1 && lastCell[1] === col) ||  // Adjacent in row\n      (Math.abs(lastCell[1] - col) === 1 && lastCell[0] === row)     // Adjacent in column\n    ) {\n      // Avoid adding the same cell again\n      if (lastCell[0] !== row || lastCell[1] !== col) {\n        // Check if the cell is already colored\n        if (grid[row][col] !== null) return;  // Skip if the cell is already filled\n\n        const newPath = [...activeFlow.path, [row, col]];\n        setActiveFlow({ ...activeFlow, path: newPath });\n        updateGridPath(newPath);\n      }\n    }\n  };\n\n  const handleCellUp = () => {\n    if (activeFlow) {\n      completeFlow(activeFlow);\n      setMoveCount(prevCount => prevCount + 1); // Increment move count for completed flow\n    }\n    setActiveFlow(null);\n    setIsDragging(false); // Stop dragging\n  };\n\n  const updateGridPath = (path) => {\n    const newGrid = grid.map(row => row.slice()); // Deep copy\n    path.forEach(([row, col]) => {\n      newGrid[row][col] = activeFlow.color; // Set the cell to active flow color\n    });\n    setGrid(newGrid);\n  };\n\n  const completeFlow = (flow) => {\n    // Check if path completes a pair, update accordingly\n    // Logic to finalize the flow and check if puzzle is solved\n  };\n\n  return (\n    <div className=\"App\">\n      <div className=\"grid\" style={{ display: 'grid', gridTemplateColumns: `repeat(${gridSize}, 50px)` }}>\n        {grid.map((row, rowIndex) => (\n          <div key={rowIndex} className=\"grid-row\">\n            {row.map((cellColor, colIndex) => (\n              <div\n                key={`${rowIndex}-${colIndex}`}\n                className={`grid-cell ${cellColor ? `filled-${cellColor}` : ''}`}\n                onMouseDown={() => handleCellDown(rowIndex, colIndex)}\n                onMouseEnter={() => handleCellOver(rowIndex, colIndex)}\n                onMouseUp={handleCellUp}\n                style={{\n                  width: '50px',\n                  height: '50px',\n                  backgroundColor: cellColor ? cellColor : 'lightgray',\n                  border: '1px solid black',\n                  position: 'relative',\n                }}\n              >\n                {cellColor && <div className=\"dot\" style={{\n                  backgroundColor: cellColor,\n                  width: '15px',\n                  height: '15px',\n                  borderRadius: '50%',\n                  position: 'absolute',\n                  top: '50%',\n                  left: '50%',\n                  transform: 'translate(-50%, -50%)'\n                }}></div>}\n              </div>\n            ))}\n          </div>\n        ))}\n      </div>\n      <div className=\"info\">\n        <p>Moves: {moveCount}</p>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}