{"ast":null,"code":"var _jsxFileName = \"/Users/rajrupasanyal/Desktop/HackCamp 2024 repo/HackCamp2024/frontend/src/puzzlePage.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport './App.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst gridSize = 5; // Sample 5x5 grid for demonstration\nconst pairs = [{\n  color: 'red',\n  start: [0, 0],\n  end: [4, 4]\n}, {\n  color: 'blue',\n  start: [0, 1],\n  end: [4, 3]\n}, {\n  color: 'yellow',\n  start: [1, 3],\n  end: [3, 1]\n}, {\n  color: 'green',\n  start: [3, 0],\n  end: [0, 2]\n}\n// Add more pairs as needed\n];\nfunction App() {\n  _s();\n  const [grid, setGrid] = useState(Array.from({\n    length: gridSize\n  }, () => Array(gridSize).fill(null)));\n  const [activeFlow, setActiveFlow] = useState(null); // Stores current flow being drawn\n  const [moveCount, setMoveCount] = useState(0);\n\n  // Initialize the grid with color pairs' start and end points\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  const initializeGrid = () => {\n    const newGrid = grid.map(row => row.slice());\n    pairs.forEach(pair => {\n      newGrid[pair.start[0]][pair.start[1]] = pair.color; // Set start point\n      newGrid[pair.end[0]][pair.end[1]] = pair.color; // Set end point\n    });\n    setGrid(newGrid);\n  };\n\n  // Call initializeGrid once when the app is mounted\n  React.useEffect(() => {\n    initializeGrid();\n  }, [initializeGrid]);\n  const handleCellDown = (row, col) => {\n    const selectedPair = pairs.find(pair => pair.start[0] === row && pair.start[1] === col || pair.end[0] === row && pair.end[1] === col);\n    if (selectedPair) {\n      setActiveFlow({\n        color: selectedPair.color,\n        path: [[row, col]]\n      });\n    }\n  };\n  const handleCellOver = (row, col) => {\n    if (!activeFlow) return;\n\n    // Avoid adding duplicate cells to the path\n    const lastCell = activeFlow.path[activeFlow.path.length - 1];\n    if (lastCell[0] === row && lastCell[1] === col) return;\n    const newPath = [...activeFlow.path, [row, col]];\n    setActiveFlow({\n      ...activeFlow,\n      path: newPath\n    });\n    updateGridPath(newPath);\n  };\n  const handleCellUp = () => {\n    if (activeFlow) {\n      completeFlow(activeFlow);\n      setMoveCount(prevCount => prevCount + 1); // Increment move count for completed flow\n    }\n    setActiveFlow(null);\n  };\n  const updateGridPath = path => {\n    const newGrid = grid.map(row => row.slice()); // Deep copy\n    path.forEach(([row, col]) => {\n      newGrid[row][col] = activeFlow.color; // Set the cell to active flow color\n    });\n    setGrid(newGrid);\n  };\n  const completeFlow = flow => {\n    // Check if path completes a pair, update accordingly\n    // Logic to finalize the flow and check if puzzle is solved\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"grid\",\n      style: {\n        display: 'grid',\n        gridTemplateColumns: `repeat(${gridSize}, 50px)`\n      },\n      children: grid.map((row, rowIndex) => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"grid-row\",\n        children: row.map((cellColor, colIndex) => /*#__PURE__*/_jsxDEV(\"div\", {\n          className: `grid-cell ${cellColor ? `filled-${cellColor}` : ''}`,\n          onMouseDown: () => handleCellDown(rowIndex, colIndex),\n          onMouseEnter: () => handleCellOver(rowIndex, colIndex),\n          onMouseUp: handleCellUp,\n          style: {\n            width: '50px',\n            height: '50px',\n            backgroundColor: cellColor ? cellColor : 'lightgray',\n            border: '1px solid black'\n          },\n          children: cellColor && /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"dot\",\n            style: {\n              backgroundColor: cellColor,\n              width: '15px',\n              height: '15px',\n              borderRadius: '50%',\n              position: 'absolute',\n              top: '50%',\n              left: '50%',\n              transform: 'translate(-50%, -50%)'\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 98,\n            columnNumber: 31\n          }, this)\n        }, `${rowIndex}-${colIndex}`, false, {\n          fileName: _jsxFileName,\n          lineNumber: 85,\n          columnNumber: 15\n        }, this))\n      }, rowIndex, false, {\n        fileName: _jsxFileName,\n        lineNumber: 83,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"info\",\n      children: /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Moves: \", moveCount]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 114,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 113,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 80,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"DHE+YwW0r3QkgecTT3FzRvfAKvA=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","jsxDEV","_jsxDEV","gridSize","pairs","color","start","end","App","_s","grid","setGrid","Array","from","length","fill","activeFlow","setActiveFlow","moveCount","setMoveCount","initializeGrid","newGrid","map","row","slice","forEach","pair","useEffect","handleCellDown","col","selectedPair","find","path","handleCellOver","lastCell","newPath","updateGridPath","handleCellUp","completeFlow","prevCount","flow","className","children","style","display","gridTemplateColumns","rowIndex","cellColor","colIndex","onMouseDown","onMouseEnter","onMouseUp","width","height","backgroundColor","border","borderRadius","position","top","left","transform","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/rajrupasanyal/Desktop/HackCamp 2024 repo/HackCamp2024/frontend/src/puzzlePage.js"],"sourcesContent":["import React, { useState } from 'react';\nimport './App.css';\n\nconst gridSize = 5;  // Sample 5x5 grid for demonstration\nconst pairs = [\n  { color: 'red', start: [0, 0], end: [4, 4] },\n  { color: 'blue', start: [0, 1], end: [4, 3] },\n  { color: 'yellow', start: [1, 3], end: [3, 1] },\n  { color: 'green', start: [3, 0], end: [0, 2] },\n  // Add more pairs as needed\n];\n\nfunction App() {\n  const [grid, setGrid] = useState(\n    Array.from({ length: gridSize }, () => Array(gridSize).fill(null))\n  );\n  const [activeFlow, setActiveFlow] = useState(null); // Stores current flow being drawn\n  const [moveCount, setMoveCount] = useState(0);\n\n  // Initialize the grid with color pairs' start and end points\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  const initializeGrid = () => {\n    const newGrid = grid.map(row => row.slice());\n    pairs.forEach(pair => {\n      newGrid[pair.start[0]][pair.start[1]] = pair.color; // Set start point\n      newGrid[pair.end[0]][pair.end[1]] = pair.color; // Set end point\n    });\n    setGrid(newGrid);\n  };\n\n  // Call initializeGrid once when the app is mounted\n  React.useEffect(() => {\n    initializeGrid();\n  }, [initializeGrid]);\n\n  const handleCellDown = (row, col) => {\n    const selectedPair = pairs.find(\n      pair => (pair.start[0] === row && pair.start[1] === col) || \n              (pair.end[0] === row && pair.end[1] === col)\n    );\n    if (selectedPair) {\n      setActiveFlow({ color: selectedPair.color, path: [[row, col]] });\n    }\n  };\n\n  const handleCellOver = (row, col) => {\n    if (!activeFlow) return;\n\n    // Avoid adding duplicate cells to the path\n    const lastCell = activeFlow.path[activeFlow.path.length - 1];\n    if (lastCell[0] === row && lastCell[1] === col) return;\n\n    const newPath = [...activeFlow.path, [row, col]];\n    setActiveFlow({ ...activeFlow, path: newPath });\n    updateGridPath(newPath);\n  };\n\n  const handleCellUp = () => {\n    if (activeFlow) {\n      completeFlow(activeFlow);\n      setMoveCount(prevCount => prevCount + 1); // Increment move count for completed flow\n    }\n    setActiveFlow(null);\n  };\n\n  const updateGridPath = (path) => {\n    const newGrid = grid.map(row => row.slice()); // Deep copy\n    path.forEach(([row, col]) => {\n      newGrid[row][col] = activeFlow.color; // Set the cell to active flow color\n    });\n    setGrid(newGrid);\n  };\n\n  const completeFlow = (flow) => {\n    // Check if path completes a pair, update accordingly\n    // Logic to finalize the flow and check if puzzle is solved\n  };\n\n  return (\n    <div className=\"App\">\n      <div className=\"grid\" style={{ display: 'grid', gridTemplateColumns: `repeat(${gridSize}, 50px)` }}>\n        {grid.map((row, rowIndex) => (\n          <div key={rowIndex} className=\"grid-row\">\n            {row.map((cellColor, colIndex) => (\n              <div\n                key={`${rowIndex}-${colIndex}`}\n                className={`grid-cell ${cellColor ? `filled-${cellColor}` : ''}`}\n                onMouseDown={() => handleCellDown(rowIndex, colIndex)}\n                onMouseEnter={() => handleCellOver(rowIndex, colIndex)}\n                onMouseUp={handleCellUp}\n                style={{\n                  width: '50px',\n                  height: '50px',\n                  backgroundColor: cellColor ? cellColor : 'lightgray',\n                  border: '1px solid black',\n                }}\n              >\n                {cellColor && <div className=\"dot\" style={{\n                  backgroundColor: cellColor,\n                  width: '15px',\n                  height: '15px',\n                  borderRadius: '50%',\n                  position: 'absolute',\n                  top: '50%',\n                  left: '50%',\n                  transform: 'translate(-50%, -50%)'\n                }}></div>}\n              </div>\n            ))}\n          </div>\n        ))}\n      </div>\n      <div className=\"info\">\n        <p>Moves: {moveCount}</p>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}