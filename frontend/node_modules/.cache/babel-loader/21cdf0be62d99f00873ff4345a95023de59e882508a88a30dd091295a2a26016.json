{"ast":null,"code":"var _jsxFileName = \"/Users/Florence/Desktop/HackCamp2024/frontend/src/puzzlePage.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useCallback } from 'react';\nimport './App.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst GRID_SIZE = 5; // size of the grid (5x5 in this example)\nconst COLORS = ['red', 'blue', 'green', 'yellow']; // colors for paths\n\n// Initialize the grid with starting dots\nfunction initGridData() {\n  const grid = Array.from({\n    length: GRID_SIZE\n  }, () => Array.from({\n    length: GRID_SIZE\n  }, () => ({\n    color: 'lightgrey',\n    isDot: false\n  })));\n\n  // Set initial colored dots (example positions)\n  grid[0][0] = {\n    color: 'red',\n    isDot: true\n  };\n  grid[4][4] = {\n    color: 'red',\n    isDot: true\n  };\n  grid[0][4] = {\n    color: 'blue',\n    isDot: true\n  };\n  grid[4][0] = {\n    color: 'blue',\n    isDot: true\n  };\n  return grid;\n}\nfunction Cell({\n  row,\n  col,\n  color,\n  onMouseDown,\n  onMouseEnter\n}) {\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"cell\",\n    style: {\n      backgroundColor: color\n    },\n    onMouseDown: () => onMouseDown(row, col),\n    onMouseEnter: () => onMouseEnter(row, col)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 24,\n    columnNumber: 5\n  }, this);\n}\n_c = Cell;\nfunction Grid({\n  gridData,\n  onDrawStart,\n  onDrawMove\n}) {\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"grid\",\n    children: gridData.map((row, rowIndex) => /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"row\",\n      children: row.map((cell, colIndex) => /*#__PURE__*/_jsxDEV(Cell, {\n        row: rowIndex,\n        col: colIndex,\n        color: cell.color,\n        onMouseDown: onDrawStart,\n        onMouseEnter: onDrawMove\n      }, colIndex, false, {\n        fileName: _jsxFileName,\n        lineNumber: 39,\n        columnNumber: 13\n      }, this))\n    }, rowIndex, false, {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 9\n    }, this))\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 35,\n    columnNumber: 5\n  }, this);\n}\n_c2 = Grid;\nfunction FlowFreeGame() {\n  _s();\n  const [gridData, setGridData] = useState(initGridData);\n  const [currentPath, setCurrentPath] = useState([]);\n  const [currentColor, setCurrentColor] = useState(null);\n  const [moves, setMoves] = useState(0);\n  const [isDrawing, setIsDrawing] = useState(false);\n  const handleDrawStart = useCallback((row, col) => {\n    const cell = gridData[row][col];\n    if (cell.isDot) {\n      // Start a new path from a dot\n      setCurrentColor(cell.color);\n      setCurrentPath([[row, col]]);\n      setIsDrawing(true);\n    }\n  }, [gridData]);\n  const handleDrawMove = useCallback((row, col) => {\n    if (!isDrawing || currentColor === null) return;\n    const lastCell = currentPath[currentPath.length - 1];\n    if (Math.abs(lastCell[0] - row) === 1 && lastCell[1] === col || Math.abs(lastCell[1] - col) === 1 && lastCell[0] === row) {\n      const newPath = [...currentPath, [row, col]];\n      setGridData(prevGrid => {\n        const newGrid = prevGrid.map(row => row.map(cell => ({\n          ...cell\n        })));\n        newPath.forEach(([r, c]) => {\n          newGrid[r][c] = {\n            color: currentColor,\n            isDot: newGrid[r][c].isDot\n          };\n        });\n        return newGrid;\n      });\n      setCurrentPath(newPath);\n    }\n  }, [isDrawing, currentColor, currentPath]);\n  const handleMouseUp = useCallback(() => {\n    if (isDrawing) {\n      setMoves(prevMoves => prevMoves + 1); // Increment move count when a path is completed\n    }\n    setIsDrawing(false);\n    setCurrentColor(null);\n    setCurrentPath([]);\n  }, [isDrawing]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"game\",\n    onMouseUp: handleMouseUp,\n    children: [/*#__PURE__*/_jsxDEV(Grid, {\n      gridData: gridData,\n      onDrawStart: handleDrawStart,\n      onDrawMove: handleDrawMove\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 110,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"hud\",\n      children: /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Moves: \", moves]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 112,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 111,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 109,\n    columnNumber: 5\n  }, this);\n}\n_s(FlowFreeGame, \"LfReOqe2j9PpsLUQRaBi+A0tGjc=\");\n_c3 = FlowFreeGame;\nexport default FlowFreeGame;\nvar _c, _c2, _c3;\n$RefreshReg$(_c, \"Cell\");\n$RefreshReg$(_c2, \"Grid\");\n$RefreshReg$(_c3, \"FlowFreeGame\");","map":{"version":3,"names":["React","useState","useCallback","jsxDEV","_jsxDEV","GRID_SIZE","COLORS","initGridData","grid","Array","from","length","color","isDot","Cell","row","col","onMouseDown","onMouseEnter","className","style","backgroundColor","fileName","_jsxFileName","lineNumber","columnNumber","_c","Grid","gridData","onDrawStart","onDrawMove","children","map","rowIndex","cell","colIndex","_c2","FlowFreeGame","_s","setGridData","currentPath","setCurrentPath","currentColor","setCurrentColor","moves","setMoves","isDrawing","setIsDrawing","handleDrawStart","handleDrawMove","lastCell","Math","abs","newPath","prevGrid","newGrid","forEach","r","c","handleMouseUp","prevMoves","onMouseUp","_c3","$RefreshReg$"],"sources":["/Users/Florence/Desktop/HackCamp2024/frontend/src/puzzlePage.js"],"sourcesContent":["import React, { useState, useCallback } from 'react';\nimport './App.css';\n\nconst GRID_SIZE = 5; // size of the grid (5x5 in this example)\nconst COLORS = ['red', 'blue', 'green', 'yellow']; // colors for paths\n\n// Initialize the grid with starting dots\nfunction initGridData() {\n  const grid = Array.from({ length: GRID_SIZE }, () =>\n    Array.from({ length: GRID_SIZE }, () => ({ color: 'lightgrey', isDot: false }))\n  );\n\n  // Set initial colored dots (example positions)\n  grid[0][0] = { color: 'red', isDot: true };\n  grid[4][4] = { color: 'red', isDot: true };\n  grid[0][4] = { color: 'blue', isDot: true };\n  grid[4][0] = { color: 'blue', isDot: true };\n\n  return grid;\n}\n\nfunction Cell({ row, col, color, onMouseDown, onMouseEnter }) {\n  return (\n    <div\n      className=\"cell\"\n      style={{ backgroundColor: color }}\n      onMouseDown={() => onMouseDown(row, col)}\n      onMouseEnter={() => onMouseEnter(row, col)}\n    />\n  );\n}\n\nfunction Grid({ gridData, onDrawStart, onDrawMove }) {\n  return (\n    <div className=\"grid\">\n      {gridData.map((row, rowIndex) => (\n        <div key={rowIndex} className=\"row\">\n          {row.map((cell, colIndex) => (\n            <Cell\n              key={colIndex}\n              row={rowIndex}\n              col={colIndex}\n              color={cell.color}\n              onMouseDown={onDrawStart}\n              onMouseEnter={onDrawMove}\n            />\n          ))}\n        </div>\n      ))}\n    </div>\n  );\n}\nfunction FlowFreeGame() {\n  const [gridData, setGridData] = useState(initGridData);\n  const [currentPath, setCurrentPath] = useState([]);\n  const [currentColor, setCurrentColor] = useState(null);\n  const [moves, setMoves] = useState(0);\n  const [isDrawing, setIsDrawing] = useState(false);\n\n  const handleDrawStart = useCallback(\n    (row, col) => {\n      const cell = gridData[row][col];\n\n      if (cell.isDot) {\n        // Start a new path from a dot\n        setCurrentColor(cell.color);\n        setCurrentPath([[row, col]]);\n        setIsDrawing(true);\n      }\n    },\n    [gridData]\n  );\n\n  const handleDrawMove = useCallback(\n    (row, col) => {\n      if (!isDrawing || currentColor === null) return;\n\n      const lastCell = currentPath[currentPath.length - 1];\n      if (\n        (Math.abs(lastCell[0] - row) === 1 && lastCell[1] === col) ||\n        (Math.abs(lastCell[1] - col) === 1 && lastCell[0] === row)\n      ) {\n        const newPath = [...currentPath, [row, col]];\n\n        setGridData((prevGrid) => {\n          const newGrid = prevGrid.map((row) => row.map((cell) => ({ ...cell })));\n          newPath.forEach(([r, c]) => {\n            newGrid[r][c] = { color: currentColor, isDot: newGrid[r][c].isDot };\n          });\n          return newGrid;\n        });\n\n        setCurrentPath(newPath);\n      }\n    },\n    [isDrawing, currentColor, currentPath]\n  );\n\n  const handleMouseUp = useCallback(() => {\n    if (isDrawing) {\n      setMoves((prevMoves) => prevMoves + 1); // Increment move count when a path is completed\n    }\n    setIsDrawing(false);\n    setCurrentColor(null);\n    setCurrentPath([]);\n  }, [isDrawing]);\n\n  return (\n    <div className=\"game\" onMouseUp={handleMouseUp}>\n      <Grid gridData={gridData} onDrawStart={handleDrawStart} onDrawMove={handleDrawMove} />\n      <div className=\"hud\">\n        <p>Moves: {moves}</p>\n      </div>\n    </div>\n  );\n}\n\nexport default FlowFreeGame;\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,WAAW,QAAQ,OAAO;AACpD,OAAO,WAAW;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEnB,MAAMC,SAAS,GAAG,CAAC,CAAC,CAAC;AACrB,MAAMC,MAAM,GAAG,CAAC,KAAK,EAAE,MAAM,EAAE,OAAO,EAAE,QAAQ,CAAC,CAAC,CAAC;;AAEnD;AACA,SAASC,YAAYA,CAAA,EAAG;EACtB,MAAMC,IAAI,GAAGC,KAAK,CAACC,IAAI,CAAC;IAAEC,MAAM,EAAEN;EAAU,CAAC,EAAE,MAC7CI,KAAK,CAACC,IAAI,CAAC;IAAEC,MAAM,EAAEN;EAAU,CAAC,EAAE,OAAO;IAAEO,KAAK,EAAE,WAAW;IAAEC,KAAK,EAAE;EAAM,CAAC,CAAC,CAChF,CAAC;;EAED;EACAL,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG;IAAEI,KAAK,EAAE,KAAK;IAAEC,KAAK,EAAE;EAAK,CAAC;EAC1CL,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG;IAAEI,KAAK,EAAE,KAAK;IAAEC,KAAK,EAAE;EAAK,CAAC;EAC1CL,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG;IAAEI,KAAK,EAAE,MAAM;IAAEC,KAAK,EAAE;EAAK,CAAC;EAC3CL,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG;IAAEI,KAAK,EAAE,MAAM;IAAEC,KAAK,EAAE;EAAK,CAAC;EAE3C,OAAOL,IAAI;AACb;AAEA,SAASM,IAAIA,CAAC;EAAEC,GAAG;EAAEC,GAAG;EAAEJ,KAAK;EAAEK,WAAW;EAAEC;AAAa,CAAC,EAAE;EAC5D,oBACEd,OAAA;IACEe,SAAS,EAAC,MAAM;IAChBC,KAAK,EAAE;MAAEC,eAAe,EAAET;IAAM,CAAE;IAClCK,WAAW,EAAEA,CAAA,KAAMA,WAAW,CAACF,GAAG,EAAEC,GAAG,CAAE;IACzCE,YAAY,EAAEA,CAAA,KAAMA,YAAY,CAACH,GAAG,EAAEC,GAAG;EAAE;IAAAM,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAC5C,CAAC;AAEN;AAACC,EAAA,GATQZ,IAAI;AAWb,SAASa,IAAIA,CAAC;EAAEC,QAAQ;EAAEC,WAAW;EAAEC;AAAW,CAAC,EAAE;EACnD,oBACE1B,OAAA;IAAKe,SAAS,EAAC,MAAM;IAAAY,QAAA,EAClBH,QAAQ,CAACI,GAAG,CAAC,CAACjB,GAAG,EAAEkB,QAAQ,kBAC1B7B,OAAA;MAAoBe,SAAS,EAAC,KAAK;MAAAY,QAAA,EAChChB,GAAG,CAACiB,GAAG,CAAC,CAACE,IAAI,EAAEC,QAAQ,kBACtB/B,OAAA,CAACU,IAAI;QAEHC,GAAG,EAAEkB,QAAS;QACdjB,GAAG,EAAEmB,QAAS;QACdvB,KAAK,EAAEsB,IAAI,CAACtB,KAAM;QAClBK,WAAW,EAAEY,WAAY;QACzBX,YAAY,EAAEY;MAAW,GALpBK,QAAQ;QAAAb,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAMd,CACF;IAAC,GAVMQ,QAAQ;MAAAX,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAWb,CACN;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACC,CAAC;AAEV;AAACW,GAAA,GAnBQT,IAAI;AAoBb,SAASU,YAAYA,CAAA,EAAG;EAAAC,EAAA;EACtB,MAAM,CAACV,QAAQ,EAAEW,WAAW,CAAC,GAAGtC,QAAQ,CAACM,YAAY,CAAC;EACtD,MAAM,CAACiC,WAAW,EAAEC,cAAc,CAAC,GAAGxC,QAAQ,CAAC,EAAE,CAAC;EAClD,MAAM,CAACyC,YAAY,EAAEC,eAAe,CAAC,GAAG1C,QAAQ,CAAC,IAAI,CAAC;EACtD,MAAM,CAAC2C,KAAK,EAAEC,QAAQ,CAAC,GAAG5C,QAAQ,CAAC,CAAC,CAAC;EACrC,MAAM,CAAC6C,SAAS,EAAEC,YAAY,CAAC,GAAG9C,QAAQ,CAAC,KAAK,CAAC;EAEjD,MAAM+C,eAAe,GAAG9C,WAAW,CACjC,CAACa,GAAG,EAAEC,GAAG,KAAK;IACZ,MAAMkB,IAAI,GAAGN,QAAQ,CAACb,GAAG,CAAC,CAACC,GAAG,CAAC;IAE/B,IAAIkB,IAAI,CAACrB,KAAK,EAAE;MACd;MACA8B,eAAe,CAACT,IAAI,CAACtB,KAAK,CAAC;MAC3B6B,cAAc,CAAC,CAAC,CAAC1B,GAAG,EAAEC,GAAG,CAAC,CAAC,CAAC;MAC5B+B,YAAY,CAAC,IAAI,CAAC;IACpB;EACF,CAAC,EACD,CAACnB,QAAQ,CACX,CAAC;EAED,MAAMqB,cAAc,GAAG/C,WAAW,CAChC,CAACa,GAAG,EAAEC,GAAG,KAAK;IACZ,IAAI,CAAC8B,SAAS,IAAIJ,YAAY,KAAK,IAAI,EAAE;IAEzC,MAAMQ,QAAQ,GAAGV,WAAW,CAACA,WAAW,CAAC7B,MAAM,GAAG,CAAC,CAAC;IACpD,IACGwC,IAAI,CAACC,GAAG,CAACF,QAAQ,CAAC,CAAC,CAAC,GAAGnC,GAAG,CAAC,KAAK,CAAC,IAAImC,QAAQ,CAAC,CAAC,CAAC,KAAKlC,GAAG,IACxDmC,IAAI,CAACC,GAAG,CAACF,QAAQ,CAAC,CAAC,CAAC,GAAGlC,GAAG,CAAC,KAAK,CAAC,IAAIkC,QAAQ,CAAC,CAAC,CAAC,KAAKnC,GAAI,EAC1D;MACA,MAAMsC,OAAO,GAAG,CAAC,GAAGb,WAAW,EAAE,CAACzB,GAAG,EAAEC,GAAG,CAAC,CAAC;MAE5CuB,WAAW,CAAEe,QAAQ,IAAK;QACxB,MAAMC,OAAO,GAAGD,QAAQ,CAACtB,GAAG,CAAEjB,GAAG,IAAKA,GAAG,CAACiB,GAAG,CAAEE,IAAI,KAAM;UAAE,GAAGA;QAAK,CAAC,CAAC,CAAC,CAAC;QACvEmB,OAAO,CAACG,OAAO,CAAC,CAAC,CAACC,CAAC,EAAEC,CAAC,CAAC,KAAK;UAC1BH,OAAO,CAACE,CAAC,CAAC,CAACC,CAAC,CAAC,GAAG;YAAE9C,KAAK,EAAE8B,YAAY;YAAE7B,KAAK,EAAE0C,OAAO,CAACE,CAAC,CAAC,CAACC,CAAC,CAAC,CAAC7C;UAAM,CAAC;QACrE,CAAC,CAAC;QACF,OAAO0C,OAAO;MAChB,CAAC,CAAC;MAEFd,cAAc,CAACY,OAAO,CAAC;IACzB;EACF,CAAC,EACD,CAACP,SAAS,EAAEJ,YAAY,EAAEF,WAAW,CACvC,CAAC;EAED,MAAMmB,aAAa,GAAGzD,WAAW,CAAC,MAAM;IACtC,IAAI4C,SAAS,EAAE;MACbD,QAAQ,CAAEe,SAAS,IAAKA,SAAS,GAAG,CAAC,CAAC,CAAC,CAAC;IAC1C;IACAb,YAAY,CAAC,KAAK,CAAC;IACnBJ,eAAe,CAAC,IAAI,CAAC;IACrBF,cAAc,CAAC,EAAE,CAAC;EACpB,CAAC,EAAE,CAACK,SAAS,CAAC,CAAC;EAEf,oBACE1C,OAAA;IAAKe,SAAS,EAAC,MAAM;IAAC0C,SAAS,EAAEF,aAAc;IAAA5B,QAAA,gBAC7C3B,OAAA,CAACuB,IAAI;MAACC,QAAQ,EAAEA,QAAS;MAACC,WAAW,EAAEmB,eAAgB;MAAClB,UAAU,EAAEmB;IAAe;MAAA3B,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC,eACtFrB,OAAA;MAAKe,SAAS,EAAC,KAAK;MAAAY,QAAA,eAClB3B,OAAA;QAAA2B,QAAA,GAAG,SAAO,EAACa,KAAK;MAAA;QAAAtB,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAI;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAClB,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACH,CAAC;AAEV;AAACa,EAAA,CA/DQD,YAAY;AAAAyB,GAAA,GAAZzB,YAAY;AAiErB,eAAeA,YAAY;AAAC,IAAAX,EAAA,EAAAU,GAAA,EAAA0B,GAAA;AAAAC,YAAA,CAAArC,EAAA;AAAAqC,YAAA,CAAA3B,GAAA;AAAA2B,YAAA,CAAAD,GAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}